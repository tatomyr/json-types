// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`bundle > bundle and translate x-type to schema (for regular $ref objects) 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test
          content:
            application/json:
              x-type:
                Simple: string
                Or:
                  - number
                  - boolean
                ArrayOfEnums:
                  array:
                    - foo
                    - bar
                OpenObject:
                  required: boolean
                  string: boolean
                Ref:
                  $ref: '#/components/x-types/Foo'
                RefObject:
                  $ref: '#/components/x-types/Bar'
                ConditionalRef:
                  - $ref: '#/components/x-types/Bar'
                  - undefined
              examples:
                Test:
                  value:
                    Simple: some string
                    Or: 42
                    ArrayOfEnums:
                      - foo
                      - foo
                      - bar
                    OpenObject:
                      required: true
                      not-listed-property: false
                    Ref: 42
                    RefObject:
                      foo: not expected here
                      somekey: 42.1
                      string: number
              schema:
                type: object
                properties:
                  Simple:
                    type: string
                  Or:
                    anyOf:
                      - type: number
                      - type: boolean
                  ArrayOfEnums:
                    type: array
                    items:
                      anyOf:
                        - type: string
                          const: foo
                        - type: string
                          const: bar
                  OpenObject:
                    type: object
                    properties:
                      required:
                        type: boolean
                    required:
                      - required
                    additionalProperties:
                      type: boolean
                  Ref:
                    type: number
                  RefObject:
                    type: object
                    properties:
                      somekey:
                        anyOf:
                          - type: boolean
                            const: true
                          - type: number
                            const: 42.1
                      string:
                        type: string
                        const: number
                    required:
                      - somekey
                      - string
                    additionalProperties: false
                  ConditionalRef:
                    anyOf:
                      - type: object
                        properties:
                          somekey:
                            anyOf:
                              - type: boolean
                                const: true
                              - type: number
                                const: 42.1
                          string:
                            type: string
                            const: number
                        required:
                          - somekey
                          - string
                        additionalProperties: false
                required:
                  - Simple
                  - Or
                  - ArrayOfEnums
                  - OpenObject
                  - Ref
                  - RefObject
                additionalProperties: false
components:
  x-types:
    Foo: number
    Bar:
      somekey:
        - true
        - 42.1
      $literal:string: $literal:number
"
`;

exports[`bundle > do not add schemas if there is no x-type 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test
          content:
            application/json:
              examples:
                Test:
                  value:
                    Simple: some string
components: {}
"
`;

exports[`bundle > resolve different type of $refs on different levels and ignore wrong $refs (with --force) when bundling 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: An object with refs
          content:
            application/json:
              x-type:
                AFieldWithRegularRef:
                  $ref: '#/components/x-types/Foo'
                AFieldWithInlineRef:
                  $ref: '#/components/x-types/Foo'
              examples:
                Correct:
                  value:
                    AFieldWithInlineRef: something
                    AFieldWithRegularRef: anything
                Incorrect:
                  value:
                    NonExistingField: wrong
              schema:
                type: object
                properties:
                  AFieldWithRegularRef:
                    anyOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: object
                      - type: array
                      - type: 'null'
                  AFieldWithInlineRef:
                    anyOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: object
                      - type: array
                      - type: 'null'
                required:
                  - AFieldWithRegularRef
                  - AFieldWithInlineRef
                additionalProperties: false
        '201':
          description: A bare ref
          content:
            application/json:
              x-type:
                $ref: '#/components/x-types/Foo'
              examples:
                Correct:
                  value: Anything
              schema:
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: object
                  - type: array
                  - type: 'null'
        '202':
          description: A file reference
          content:
            application/json:
              x-type: number
              examples:
                Correct:
                  value: 42
                Incorrect:
                  value: false
              schema:
                type: number
        '404':
          description: A wrong ref
          content:
            application/json:
              x-type:
                AWrongRef:
                  $ref: wrong-file.yaml
              example:
                AWrongRef: Accepts anything
              schema:
                type: object
                properties:
                  AWrongRef:
                    anyOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: object
                      - type: array
                      - type: 'null'
                required:
                  - AWrongRef
                additionalProperties: false
components:
  x-types:
    Foo: any
"
`;

exports[`lint > lints openapi.yaml (using preprocessors to transform) 1`] = `
"validating applications/resources/openapi.yaml...
[1] applications/resources/openapi.yaml:51:10 at #/components/x-types/Foo

Expected type \`XTypeObject\` (object) but got \`string\`

49 | components:
50 |   x-types:
51 |     Foo: number
   |          ^^^^^^
52 |     Bar:
53 |       somekey: [true, 42.1]

referenced from applications/resources/openapi.yaml:26:19 at #/paths/~1test/get/responses/200/content/application~1json/x-type/Ref 

Error was generated by the spec rule.


[2] applications/resources/openapi.yaml:46:23 at #/paths/~1test/get/responses/200/content/application~1json/examples/Test/value/RefObject/foo

Example value must conform to the schema: \`RefObject\` property must NOT have additional properties \`foo\`.

44 | Ref: 42
45 | RefObject:
46 |   foo: not expected here
   |   ^^^
47 |   somekey: 42.10
48 |   string: number

referenced from applications/resources/openapi.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


applications/resources/openapi.yaml: validated in <test>ms

❌ Validation failed with 2 errors.
run \`redocly lint --generate-ignore-file\` to add all problems to the ignore file.

"
`;

exports[`lint > lints x-openapi-with-refs.yaml 1`] = `
"validating applications/outputs/x-openapi-with-refs.yaml...
[1] applications/outputs/x-openapi-with-refs.yaml:103:10 at #/components/x-types/Foo

Expected type \`XTypeObject\` (object) but got \`string\`

101 | components:
102 |   x-types:
103 |     Foo: any
    |          ^^^
104 |

referenced from applications/outputs/x-openapi-with-refs.yaml:15:19 at #/paths/~1test/get/responses/200/content/application~1json/x-type/AFieldWithRegularRef 

Error was generated by the spec rule.


[2] applications/outputs/x-openapi-with-refs.yaml:25:21 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value

Example value must conform to the schema: must have required property 'AFieldWithRegularRef'.

23 |   Incorrect:
24 |     value:
25 |       NonExistingField: wrong
   |       ^^^^^^^^^^^^^^^^^^^^^^^
26 | schema:
27 |   type: object

referenced from applications/outputs/x-openapi-with-refs.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[3] applications/outputs/x-openapi-with-refs.yaml:25:21 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value

Example value must conform to the schema: must have required property 'AFieldWithInlineRef'.

23 |   Incorrect:
24 |     value:
25 |       NonExistingField: wrong
   |       ^^^^^^^^^^^^^^^^^^^^^^^
26 | schema:
27 |   type: object

referenced from applications/outputs/x-openapi-with-refs.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[4] applications/outputs/x-openapi-with-refs.yaml:25:21 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value/NonExistingField

Example value must conform to the schema: must NOT have additional properties \`NonExistingField\`.

23 |   Incorrect:
24 |     value:
25 |       NonExistingField: wrong
   |       ^^^^^^^^^^^^^^^^
26 | schema:
27 |   type: object

referenced from applications/outputs/x-openapi-with-refs.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[5] applications/outputs/x-openapi-with-refs.yaml:75:26 at #/paths/~1test/get/responses/202/content/application~1json/examples/Incorrect/value

Example value must conform to the schema: type must be number.

73 |     value: 42
74 |   Incorrect:
75 |     value: false
   |            ^^^^^
76 | schema:
77 |   type: number

referenced from applications/outputs/x-openapi-with-refs.yaml:70:15 at #/paths/~1test/get/responses/202/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[6] applications/outputs/x-openapi-with-refs.yaml:84:19 at #/paths/~1test/get/responses/404/content/application~1json/x-type/AWrongRef

Can't resolve $ref: ENOENT: no such file or directory './applications/outputs/wrong-file.yaml'

82 | x-type:
83 |   AWrongRef:
84 |     $ref: wrong-file.yaml
   |     ^^^^^^^^^^^^^^^^^^^^^
85 | example:
86 |   AWrongRef: Accepts anything

Error was generated by the no-unresolved-refs rule.


applications/outputs/x-openapi-with-refs.yaml: validated in <test>ms

❌ Validation failed with 6 errors.
run \`redocly lint --generate-ignore-file\` to add all problems to the ignore file.

"
`;
