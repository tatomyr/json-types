// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`bundle > bundle and translate x-type to schema (for regular $ref objects) 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test
          content:
            application/json:
              x-type:
                Simple: string
                Or:
                  - number
                  - boolean
                ArrayOfEnums:
                  array:
                    - foo
                    - bar
                OpenObject:
                  required: boolean
                  string: boolean
                Ref: number
                RefObject:
                  somekey:
                    - true
                    - 42.1
                  $literal:string: $literal:number
                ConditionalRef:
                  - $ref: '#/components/x-types/Bar'
                  - undefined
              examples:
                Test:
                  value:
                    Simple: some string
                    Or: 42
                    ArrayOfEnums:
                      - foo
                      - foo
                      - bar
                    OpenObject:
                      required: true
                      not-listed-property: false
                    Ref: 42
                    RefObject:
                      foo: not expected here
                      somekey: 42.1
                      string: number
              schema:
                type: object
                properties:
                  Simple:
                    type: string
                  Or:
                    anyOf:
                      - type: number
                      - type: boolean
                  ArrayOfEnums:
                    type: array
                    items:
                      type: string
                      enum:
                        - foo
                        - bar
                  OpenObject:
                    type: object
                    properties:
                      required:
                        type: boolean
                    required:
                      - required
                    additionalProperties:
                      type: boolean
                  Ref:
                    type: number
                  RefObject:
                    type: object
                    properties:
                      somekey:
                        anyOf:
                          - type: boolean
                            enum:
                              - true
                          - type: number
                            enum:
                              - 42.1
                      string:
                        type: string
                        enum:
                          - number
                    required:
                      - somekey
                      - string
                    additionalProperties: false
                  ConditionalRef:
                    type: object
                    properties:
                      somekey:
                        anyOf:
                          - type: boolean
                            enum:
                              - true
                          - type: number
                            enum:
                              - 42.1
                      string:
                        type: string
                        enum:
                          - number
                    required:
                      - somekey
                      - string
                    additionalProperties: false
                required:
                  - Simple
                  - Or
                  - ArrayOfEnums
                  - OpenObject
                  - Ref
                  - RefObject
                additionalProperties: false
components:
  x-types:
    Foo: number
    Bar:
      somekey:
        - true
        - 42.1
      $literal:string: $literal:number
"
`;

exports[`bundle > bundle and translate x-type to schema inside parameters 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      parameters:
        - name: correct
          in: query
          x-type: string
          example: Test
          schema:
            type: string
        - name: wrong-example
          in: query
          x-type: string
          example: 42
          schema:
            type: string
        - name: lacks-x-type
          in: query
        - $ref: '#/components/parameters/Referenced'
components:
  parameters:
    Referenced:
      name: referenced-wrong-example
      in: query
      x-type: string
      example: true
      schema:
        type: string
"
`;

exports[`bundle > bundle and translate x-types inside ORs 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test.
          content:
            application/json:
              x-type:
                Or:
                  - az
                  - bukh
                Conditional:
                  - vidh
                  - undefined
                NestedConditional:
                  - $ref: '#/components/x-types/Or'
                  - $ref: '#/components/x-types/Conditional'
                ComplexOr:
                  - az
                  - bukh: vidh
                  - - $literal:string
                    - $literal:number
              examples:
                Correct:
                  value:
                    Or: az
                    ComplexOr: string
                Incorrect:
                  value:
                    Or: wrong
                    Conditional: wrong
                    NestedConditional: wrong
                    ComplexOr: wrong
              schema:
                type: object
                properties:
                  Or:
                    type: string
                    enum:
                      - az
                      - bukh
                  Conditional:
                    type: string
                    enum:
                      - vidh
                  NestedConditional:
                    type: string
                    enum:
                      - az
                      - bukh
                      - vidh
                  ComplexOr:
                    anyOf:
                      - type: string
                        enum:
                          - az
                          - string
                          - number
                      - type: object
                        properties:
                          bukh:
                            type: string
                            enum:
                              - vidh
                        required:
                          - bukh
                        additionalProperties: false
                required:
                  - Or
                  - ComplexOr
                additionalProperties: false
components:
  x-types:
    Or:
      - az
      - bukh
    Conditional:
      - vidh
      - undefined
"
`;

exports[`bundle > do not add schemas if there is no x-type 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test
          content:
            application/json:
              examples:
                Test:
                  value:
                    Simple: some string
components: {}
"
`;

exports[`bundle > do not bundle an openapi with type never 1`] = `undefined`;

exports[`bundle > resolve different type of $refs on different levels and ignore wrong $refs (with --force) when bundling 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: An object with refs
          content:
            application/json:
              x-type:
                AFieldWithRegularRef: any
                AFieldWithInlineRef: any
              examples:
                Correct:
                  value:
                    AFieldWithInlineRef: something
                    AFieldWithRegularRef: anything
                Incorrect:
                  value:
                    NonExistingField: wrong
              schema:
                type: object
                properties:
                  AFieldWithRegularRef:
                    anyOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: object
                      - type: array
                      - type: 'null'
                  AFieldWithInlineRef:
                    anyOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: object
                      - type: array
                      - type: 'null'
                required:
                  - AFieldWithRegularRef
                  - AFieldWithInlineRef
                additionalProperties: false
        '201':
          description: A bare ref
          content:
            application/json:
              x-type: any
              examples:
                Correct:
                  value: Anything
              schema:
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: object
                  - type: array
                  - type: 'null'
        '202':
          description: A file reference
          content:
            application/json:
              x-type: number
              examples:
                Correct:
                  value: 42
                Incorrect:
                  value: false
              schema:
                type: number
        '203':
          description: A transitive reference
          content:
            application/json:
              x-type:
                array: any
              examples:
                Correct:
                  value:
                    - anything
                Incorrect:
                  value: anything
              schema:
                type: array
                items:
                  anyOf:
                    - type: string
                    - type: number
                    - type: boolean
                    - type: object
                    - type: array
                    - type: 'null'
        '404':
          description: A wrong ref
          content:
            application/json:
              x-type:
                AWrongRef:
                  $ref: wrong-file.yaml
              example:
                AWrongRef: Accepts anything
              schema:
                type: object
                properties:
                  AWrongRef:
                    anyOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: object
                      - type: array
                      - type: 'null'
                required:
                  - AWrongRef
                additionalProperties: false
components:
  x-types:
    Foo: any
    Bar:
      array: any
"
`;

exports[`lint > lints ORs (including nested and referenced) 1`] = `
"validating applications/resources/openapi-or.yaml...
[1] applications/resources/openapi-or.yaml:34:25 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value/Or

Example value must conform to the schema: \`Or\` property must be equal to one of the allowed values "az", "bukh".

Did you mean:
  - az
  - bukh

32 | Incorrect:
33 |   value:
34 |     Or: wrong
   |         ^^^^^
35 |     Conditional: wrong
36 |     NestedConditional: wrong

referenced from applications/resources/openapi-or.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[2] applications/resources/openapi-or.yaml:35:34 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value/Conditional

Example value must conform to the schema: \`Conditional\` property must be equal to one of the allowed values "vidh".

Did you mean: vidh ?

33 | value:
34 |   Or: wrong
35 |   Conditional: wrong
   |                ^^^^^
36 |   NestedConditional: wrong
37 |   ComplexOr: wrong

referenced from applications/resources/openapi-or.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[3] applications/resources/openapi-or.yaml:36:40 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value/NestedConditional

Example value must conform to the schema: \`NestedConditional\` property must be equal to one of the allowed values "az", "bukh", "vidh".

Did you mean:
  - az
  - bukh
  - vidh

34 | Or: wrong
35 | Conditional: wrong
36 | NestedConditional: wrong
   |                    ^^^^^
37 | ComplexOr: wrong
38 |

referenced from applications/resources/openapi-or.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[4] applications/resources/openapi-or.yaml:37:32 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value/ComplexOr

Example value must conform to the schema: \`ComplexOr\` property must be equal to one of the allowed values "az", "string", "number".

Did you mean:
  - az
  - string
  - number

35 |                     Conditional: wrong
36 |                     NestedConditional: wrong
37 |                     ComplexOr: wrong
   |                                ^^^^^
38 |
39 | components:

referenced from applications/resources/openapi-or.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[5] applications/resources/openapi-or.yaml:37:32 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value/ComplexOr

Example value must conform to the schema: \`ComplexOr\` property type must be object.

35 |                     Conditional: wrong
36 |                     NestedConditional: wrong
37 |                     ComplexOr: wrong
   |                                ^^^^^
38 |
39 | components:

referenced from applications/resources/openapi-or.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[6] applications/resources/openapi-or.yaml:37:32 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value/ComplexOr

Example value must conform to the schema: \`ComplexOr\` property must match a schema in anyOf.

35 |                     Conditional: wrong
36 |                     NestedConditional: wrong
37 |                     ComplexOr: wrong
   |                                ^^^^^
38 |
39 | components:

referenced from applications/resources/openapi-or.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


applications/resources/openapi-or.yaml: validated in <test>ms

❌ Validation failed with 6 errors.
run \`redocly lint --generate-ignore-file\` to add all problems to the ignore file.

"
`;

exports[`lint > lints openapi that contains wrong and correct $ands 1`] = `
"validating applications/resources/openapi-and.yaml...
[1] applications/resources/openapi-and.yaml:16:17 at #/paths/~1test/get/responses/200/content/application~1json/example

Example value must conform to the schema: must have required property 'bar'.

14 |                 $ref: "#/components/x-types/CorrectAnd"
15 |               example:
16 |                 foo: wrong!
   |                 ^^^^^^^^^^^
17 |                 wrong: not-expected!
   |                 ^^^^^^^^^^^^^^^^^^^^
18 | components:
19 |   x-types:

referenced from applications/resources/openapi-and.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[2] applications/resources/openapi-and.yaml:17:17 at #/paths/~1test/get/responses/200/content/application~1json/example/wrong

Example value must conform to the schema: must NOT have additional properties \`wrong\`.

15 |               example:
16 |                 foo: wrong!
17 |                 wrong: not-expected!
   |                 ^^^^^
18 | components:
19 |   x-types:

referenced from applications/resources/openapi-and.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[3] applications/resources/openapi-and.yaml:16:22 at #/paths/~1test/get/responses/200/content/application~1json/example/foo

Example value must conform to the schema: \`foo\` property type must be boolean.

14 |                 $ref: "#/components/x-types/CorrectAnd"
15 |               example:
16 |                 foo: wrong!
   |                      ^^^^^^
17 |                 wrong: not-expected!
18 | components:

referenced from applications/resources/openapi-and.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[4] applications/resources/openapi-and.yaml:22:9 at #/components/x-types/WrongAndFormat/$and

Expected type \`XTypeList\` (array) but got \`object\`

20 | WrongAndFormat:
21 |   $and: # Expected array!
22 |     foo: boolean
   |     ^^^^^^^^^^^^
23 |     bar: number
   |     ^^^^^^^^^^^
24 | CorrectAnd:
25 |   $and:

Error was generated by the spec rule.


applications/resources/openapi-and.yaml: validated in <test>ms

❌ Validation failed with 4 errors.
run \`redocly lint --generate-ignore-file\` to add all problems to the ignore file.

"
`;

exports[`lint > lints openapi with mixed types 1`] = `
"validating applications/resources/openapi-mixed-types.yaml...
[1] applications/resources/openapi-mixed-types.yaml:9:7 at #/components/x-types/MixedTypeArray/neighbour

Property \`neighbour\` is not expected here.

 7 | MixedTypeArray:
 8 |   array: string
 9 |   neighbour: not-allowed
   |   ^^^^^^^^^
10 | MixedAnd:
11 |   $and:

Error was generated by the spec rule.


[2] applications/resources/openapi-mixed-types.yaml:14:7 at #/components/x-types/MixedAnd/neighbour

Property \`neighbour\` is not expected here.

12 |     - foo: string
13 |     - bar: string
14 |   neighbour: not-allowed
   |   ^^^^^^^^^
15 | MixedRef:
16 |   $ref: "#/components/x-types/Allowed"

Error was generated by the spec rule.


[3] applications/resources/openapi-mixed-types.yaml:16:7 at #/components/x-types/MixedRef

You cannot have other properties alongside "$ref" in the same object

14 |   neighbour: not-allowed
15 | MixedRef:
16 |   $ref: "#/components/x-types/Allowed"
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 |   neighbour: not-allowed
   |   ^^^^^^^^^^^^^^^^^^^^^^
18 | Allowed:
19 |   foo: boolean

Error was generated by the x-types/no-$ref-neighbors rule.


applications/resources/openapi-mixed-types.yaml: validated in <test>ms

❌ Validation failed with 3 errors.
run \`redocly lint --generate-ignore-file\` to add all problems to the ignore file.

"
`;

exports[`lint > lints openapi.yaml (using preprocessors to transform) 1`] = `
"validating applications/resources/openapi.yaml...
[1] applications/resources/openapi.yaml:46:23 at #/paths/~1test/get/responses/200/content/application~1json/examples/Test/value/RefObject/foo

Example value must conform to the schema: \`RefObject\` property must NOT have additional properties \`foo\`.

44 | Ref: 42
45 | RefObject:
46 |   foo: not expected here
   |   ^^^
47 |   somekey: 42.10
48 |   string: number

referenced from applications/resources/openapi.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


applications/resources/openapi.yaml: validated in <test>ms

❌ Validation failed with 1 error.
run \`redocly lint --generate-ignore-file\` to add all problems to the ignore file.

"
`;

exports[`lint > lints with x-types inside parameters 1`] = `
"validating applications/resources/openapi-with-x-types-inside-parameters.yaml...
[1] applications/resources/openapi-with-x-types-inside-parameters.yaml:16:20 at #/paths/~1test/get/parameters/1/example

Example value must conform to the schema: type must be string.

14 |   in: query
15 |   x-type: string
16 |   example: 42
   |            ^^
17 | - name: lacks-x-type
18 |   in: query

referenced from applications/resources/openapi-with-x-types-inside-parameters.yaml:13:11 at #/paths/~1test/get/parameters/1 

Error was generated by the no-invalid-parameter-examples rule.


[2] applications/resources/openapi-with-x-types-inside-parameters.yaml:17:11 at #/paths/~1test/get/parameters/2

Must contain at least one of the following fields: schema, content, x-type.

15 |           x-type: string
16 |           example: 42
17 |         - name: lacks-x-type
   |           ^^^^^^^^^^^^^^^^^^
18 |           in: query
   |           ^^^^^^^^^
19 |         - $ref: "#/components/parameters/Referenced"
20 | components:

Error was generated by the spec rule.


[3] applications/resources/openapi-with-x-types-inside-parameters.yaml:26:16 at #/components/parameters/Referenced/example

Example value must conform to the schema: type must be string.

24 | in: query
25 | x-type: string
26 | example: true
   |          ^^^^
27 |

referenced from applications/resources/openapi-with-x-types-inside-parameters.yaml:23:7 at #/components/parameters/Referenced 

Error was generated by the no-invalid-parameter-examples rule.


applications/resources/openapi-with-x-types-inside-parameters.yaml: validated in <test>ms

❌ Validation failed with 3 errors.
run \`redocly lint --generate-ignore-file\` to add all problems to the ignore file.

"
`;

exports[`lint > lints x-openapi-with-refs.yaml 1`] = `
"validating applications/outputs/x-openapi-with-refs.yaml...
[1] applications/outputs/x-openapi-with-refs.yaml:23:21 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value

Example value must conform to the schema: must have required property 'AFieldWithRegularRef'.

21 |   Incorrect:
22 |     value:
23 |       NonExistingField: wrong
   |       ^^^^^^^^^^^^^^^^^^^^^^^
24 | schema:
25 |   type: object

referenced from applications/outputs/x-openapi-with-refs.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[2] applications/outputs/x-openapi-with-refs.yaml:23:21 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value

Example value must conform to the schema: must have required property 'AFieldWithInlineRef'.

21 |   Incorrect:
22 |     value:
23 |       NonExistingField: wrong
   |       ^^^^^^^^^^^^^^^^^^^^^^^
24 | schema:
25 |   type: object

referenced from applications/outputs/x-openapi-with-refs.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[3] applications/outputs/x-openapi-with-refs.yaml:23:21 at #/paths/~1test/get/responses/200/content/application~1json/examples/Incorrect/value/NonExistingField

Example value must conform to the schema: must NOT have additional properties \`NonExistingField\`.

21 |   Incorrect:
22 |     value:
23 |       NonExistingField: wrong
   |       ^^^^^^^^^^^^^^^^
24 | schema:
25 |   type: object

referenced from applications/outputs/x-openapi-with-refs.yaml:13:15 at #/paths/~1test/get/responses/200/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[4] applications/outputs/x-openapi-with-refs.yaml:72:26 at #/paths/~1test/get/responses/202/content/application~1json/examples/Incorrect/value

Example value must conform to the schema: type must be number.

70 |     value: 42
71 |   Incorrect:
72 |     value: false
   |            ^^^^^
73 | schema:
74 |   type: number

referenced from applications/outputs/x-openapi-with-refs.yaml:67:15 at #/paths/~1test/get/responses/202/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[5] applications/outputs/x-openapi-with-refs.yaml:86:26 at #/paths/~1test/get/responses/203/content/application~1json/examples/Incorrect/value

Example value must conform to the schema: type must be array.

84 |       - anything
85 |   Incorrect:
86 |     value: anything
   |            ^^^^^^^^
87 | schema:
88 |   type: array

referenced from applications/outputs/x-openapi-with-refs.yaml:79:15 at #/paths/~1test/get/responses/203/content/application~1json 

Error was generated by the no-invalid-media-type-examples rule.


[6] applications/outputs/x-openapi-with-refs.yaml:103:19 at #/paths/~1test/get/responses/404/content/application~1json/x-type/AWrongRef

Can't resolve $ref: ENOENT: no such file or directory './applications/outputs/wrong-file.yaml'

101 | x-type:
102 |   AWrongRef:
103 |     $ref: wrong-file.yaml
    |     ^^^^^^^^^^^^^^^^^^^^^
104 | example:
105 |   AWrongRef: Accepts anything

Error was generated by the no-unresolved-refs rule.


applications/outputs/x-openapi-with-refs.yaml: validated in <test>ms

❌ Validation failed with 6 errors.
run \`redocly lint --generate-ignore-file\` to add all problems to the ignore file.

"
`;
