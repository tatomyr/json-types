// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`bundle > bundle and translate x-type to schema (for regular $ref objects) 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test
          content:
            application/json:
              x-type:
                Simple: string
                Or:
                  - number
                  - boolean
                ArrayOfEnums:
                  array:
                    - foo
                    - bar
                OpenObject:
                  required: boolean
                  string: boolean
                Ref: number
                RefObject:
                  somekey:
                    - true
                    - 42.1
                  $literal:string: $literal:number
                ConditionalRef:
                  - $ref: '#/components/x-types/Bar'
                  - undefined
              examples:
                Test:
                  value:
                    Simple: some string
                    Or: 42
                    ArrayOfEnums:
                      - foo
                      - foo
                      - bar
                    OpenObject:
                      required: true
                      not-listed-property: false
                    Ref: 42
                    RefObject:
                      foo: not expected here
                      somekey: 42.1
                      string: number
              schema:
                type: object
                properties:
                  Simple:
                    type: string
                  Or:
                    anyOf:
                      - type: number
                      - type: boolean
                  ArrayOfEnums:
                    type: array
                    items:
                      type: string
                      enum:
                        - foo
                        - bar
                  OpenObject:
                    type: object
                    properties:
                      required:
                        type: boolean
                    required:
                      - required
                    additionalProperties:
                      type: boolean
                  Ref:
                    type: number
                  RefObject:
                    type: object
                    properties:
                      somekey:
                        anyOf:
                          - type: boolean
                            enum:
                              - true
                          - type: number
                            enum:
                              - 42.1
                      string:
                        type: string
                        enum:
                          - number
                    required:
                      - somekey
                      - string
                    additionalProperties: false
                  ConditionalRef:
                    type: object
                    properties:
                      somekey:
                        anyOf:
                          - type: boolean
                            enum:
                              - true
                          - type: number
                            enum:
                              - 42.1
                      string:
                        type: string
                        enum:
                          - number
                    required:
                      - somekey
                      - string
                    additionalProperties: false
                required:
                  - Simple
                  - Or
                  - ArrayOfEnums
                  - OpenObject
                  - Ref
                  - RefObject
                additionalProperties: false
components:
  x-types:
    Foo: number
    Bar:
      somekey:
        - true
        - 42.1
      $literal:string: $literal:number
"
`;

exports[`bundle > descriptions in x-types 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Root response description.
          content:
            application/json:
              x-type:
                Plain: string
                Complex:
                  array:
                    string: boolean
                    $literal:string:
                      - $literal:number
                      - $literal:string
                    $descriptions:
                      string: |
                        An example of using literals.
                Conditional:
                  - az
                  - undefined
                $literal:$descriptions: $descriptions
                Referenced: string
                NestedReferenced:
                  ReferencedAgain:
                    $ref: '#/components/x-types/Referenced'
                  $descriptions:
                    ReferencedAgain: Referenced inside the ref.
                $descriptions:
                  Plain: A plain string field.
                  Complex: An array of boolean records with the fixed 'string' property.
                  Conditional: A conditional field.
                  $descriptions: Literal $descriptions field.
                  Referenced: A referenced property.
                  NestedReferenced: A reference with nested references.
              schema:
                type: object
                properties:
                  Plain:
                    description: A plain string field.
                    type: string
                  Complex:
                    description: An array of boolean records with the fixed 'string' property.
                    type: array
                    items:
                      type: object
                      properties:
                        string:
                          description: |
                            An example of using literals.
                          type: string
                          enum:
                            - number
                            - string
                      required:
                        - string
                      additionalProperties:
                        type: boolean
                  Conditional:
                    description: A conditional field.
                    type: string
                    enum:
                      - az
                  $descriptions:
                    description: Literal $descriptions field.
                    type: string
                    enum:
                      - $descriptions
                  Referenced:
                    description: A referenced property.
                    type: string
                  NestedReferenced:
                    description: A reference with nested references.
                    type: object
                    properties:
                      ReferencedAgain:
                        description: Referenced inside the ref.
                        type: string
                    required:
                      - ReferencedAgain
                    additionalProperties: false
                required:
                  - Plain
                  - Complex
                  - $descriptions
                  - Referenced
                  - NestedReferenced
                additionalProperties: false
components:
  x-types:
    Referenced: string
    NestedReferenced:
      ReferencedAgain: string
      $descriptions:
        ReferencedAgain: Referenced inside the ref.
"
`;

exports[`bundle > distributivity in x-types 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test.
          content:
            application/json:
              examples:
                Correct:
                  value:
                    az: correct
                    vidh: correct
                Incorrect:
                  value:
                    bukh: requires also vidh
              x-type:
                $and:
                  - - az: string
                    - bukh: string
                  - - vidh: string
              schema:
                anyOf:
                  - type: object
                    properties:
                      az:
                        type: string
                      vidh:
                        type: string
                    required:
                      - az
                      - vidh
                    additionalProperties: false
                  - type: object
                    properties:
                      bukh:
                        type: string
                      vidh:
                        type: string
                    required:
                      - bukh
                      - vidh
                    additionalProperties: false
components: {}
"
`;

exports[`bundle > do not add schemas if there is no x-type 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test
          content:
            application/json:
              examples:
                Test:
                  value:
                    Simple: some string
components: {}
"
`;

exports[`bundle > do not bundle an openapi with type never 1`] = `undefined`;

exports[`bundle > openapi with $-prefixed fields 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test
          content:
            application/json:
              x-type:
                $unknown-prefixed-field: should be ignored/removed
                $literal:$literal-prefixed-key: should remain
                not-starting-with-$: doesn't have a special meaning, should remain
              schema:
                type: object
                properties:
                  $literal-prefixed-key:
                    type: string
                    enum:
                      - should remain
                  not-starting-with-$:
                    type: string
                    enum:
                      - doesn't have a special meaning, should remain
                required:
                  - $literal-prefixed-key
                  - not-starting-with-$
                additionalProperties: false
components: {}
"
`;

exports[`bundle > openapi with $and and $description 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test $and with $description.
          content:
            application/json:
              x-type:
                $and:
                  - az:
                      bukh: vidh
                      $descriptions:
                        bukh: Description of az.bukh
                  - az:
                      glagol: dobro
                      $descriptions:
                        glagol: Description of az.glagol
              examples:
                Correct:
                  value:
                    az:
                      bukh: vidh
                      glagol: dobro
                Incorrect:
                  value:
                    az:
                      glagol: vidh
                      not-expected: fail
              schema:
                type: object
                properties:
                  az:
                    type: object
                    properties:
                      bukh:
                        description: Description of az.bukh
                        type: string
                        enum:
                          - vidh
                      glagol:
                        description: Description of az.glagol
                        type: string
                        enum:
                          - dobro
                    required:
                      - bukh
                      - glagol
                    additionalProperties: false
                required:
                  - az
                additionalProperties: false
components: {}
"
`;

exports[`bundle > openapi with circular refs converted to schemas 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test.
          content:
            application/json:
              x-type:
                name: string
                age: number
                best_friend:
                  - $ref: '#/components/x-types/Person'
                  - undefined
              examples:
                Correct:
                  value:
                    name: Az
                    age: 42
                    best_friend:
                      name: Bukh
                      age: 23
                Incorrect:
                  value:
                    name: Vidh
                    age: wrong
                    best_friend: wrong
              schema:
                type: object
                properties:
                  name:
                    type: string
                  age:
                    type: number
                  best_friend:
                    type: object
                    properties:
                      name:
                        type: string
                      age:
                        type: number
                      best_friend:
                        type: object
                        properties:
                          name:
                            type: string
                          age:
                            type: number
                          best_friend: {}
                        required:
                          - name
                          - age
                        additionalProperties: false
                    required:
                      - name
                      - age
                    additionalProperties: false
                required:
                  - name
                  - age
                additionalProperties: false
components:
  x-types:
    Person:
      name: string
      age: number
      best_friend:
        - $ref: '#/components/x-types/Person'
        - undefined
"
`;

exports[`bundle > openapi with discriminators converted to schemas 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test discriminators.
          content:
            application/inheritance+json:
              x-type:
                bukh: string
                vidh: number
                $discriminator:
                  propertyName: bukh
                  mapping:
                    glagol: '#/components/schemas/Glagol'
                    dobro: '#/components/schemas/Dobro'
              schema:
                type: object
                properties:
                  bukh:
                    type: string
                  vidh:
                    type: number
                required:
                  - bukh
                  - vidh
                additionalProperties: false
                discriminator:
                  propertyName: bukh
                  mapping:
                    glagol: '#/components/schemas/Glagol'
                    dobro: '#/components/schemas/Dobro'
              examples:
                Correct:
                  value:
                    bukh: glagol
                    vidh: 1
                    specificToGlagol: false
                Incorrect:
                  value:
                    bukh: dobro
            application/polymorphism+json:
              x-type:
                - $ref: '#/components/x-types/H'
                - mhslite:
                    - boolean
                    - undefined
                  kako: for_mhslite
                  discriminator:
                    - for test
                    - undefined
              schema:
                anyOf:
                  - type: object
                    properties:
                      ludh:
                        type: number
                      kako:
                        type: string
                        enum:
                          - for_H
                    required:
                      - kako
                    additionalProperties: false
                  - type: object
                    properties:
                      mhslite:
                        type: boolean
                      kako:
                        type: string
                        enum:
                          - for_mhslite
                      discriminator:
                        type: string
                        enum:
                          - for test
                    required:
                      - kako
                    additionalProperties: false
              examples:
                Correct:
                  value:
                    kako: for_H
                    ludh: 1
                Incorrect:
                  value:
                    kako: wrong
components:
  schemas:
    Az:
      type: object
      properties:
        bukh:
          type: string
        vidh:
          type: number
      discriminator:
        propertyName: bukh
        mapping:
          glagol: '#/components/schemas/Glagol'
          dobro: '#/components/schemas/Dobro'
    Glagol:
      allOf:
        - $ref: '#/components/schemas/Az'
        - type: object
          properties:
            specificToGlagol:
              type: boolean
    Dobro:
      allOf:
        - $ref: '#/components/schemas/Az'
        - type: object
          properties:
            specificToDobro:
              type: integer
            discriminator:
              type: string
              enum:
                - for test
    Zelo:
      oneOf:
        - $ref: '#/components/schemas/H'
        - type: object
          properties:
            mhslite:
              type: boolean
            kako:
              type: string
              enum:
                - for_mhslite
            discriminator:
              type: string
              enum:
                - for test
          required:
            - kako
      discriminator:
        propertyName: kako
    H:
      type: object
      properties:
        ludh:
          type: number
        kako:
          type: string
          enum:
            - for_H
      required:
        - kako
  x-types:
    Az:
      bukh: string
      vidh: number
      $discriminator:
        propertyName: bukh
        mapping:
          glagol: '#/components/schemas/Glagol'
          dobro: '#/components/schemas/Dobro'
    Glagol:
      $and:
        - $ref: '#/components/x-types/Az'
        - specificToGlagol: boolean
    Dobro:
      $and:
        - $ref: '#/components/x-types/Az'
        - specificToDobro: number::integer
          discriminator: for test
    Zelo:
      - $ref: '#/components/x-types/H'
      - mhslite:
          - boolean
          - undefined
        kako: for_mhslite
        discriminator:
          - for test
          - undefined
    H:
      ludh:
        - number
        - undefined
      kako: for_H
"
`;

exports[`bundle > openapi with discriminators converted to x-types 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test discriminators.
          content:
            application/inheritance+json:
              x-type:
                $ref: '#/components/x-types/Az'
              examples:
                Correct:
                  value:
                    bukh: glagol
                    vidh: 1
                    specificToGlagol: false
                Incorrect:
                  value:
                    bukh: dobro
            application/polymorphism+json:
              x-type:
                $ref: '#/components/x-types/Zelo'
              examples:
                Correct:
                  value:
                    kako: for_H
                    ludh: 1
                Incorrect:
                  value:
                    kako: wrong
components:
  schemas:
    Az:
      type: object
      properties:
        bukh:
          type: string
        vidh:
          type: number
      discriminator:
        propertyName: bukh
        mapping:
          glagol: '#/components/schemas/Glagol'
          dobro: '#/components/schemas/Dobro'
    Glagol:
      allOf:
        - $ref: '#/components/schemas/Az'
        - type: object
          properties:
            specificToGlagol:
              type: boolean
    Dobro:
      allOf:
        - $ref: '#/components/schemas/Az'
        - type: object
          properties:
            specificToDobro:
              type: integer
            discriminator:
              type: string
              enum:
                - for test
    Zelo:
      oneOf:
        - $ref: '#/components/schemas/H'
        - type: object
          properties:
            mhslite:
              type: boolean
            kako:
              type: string
              enum:
                - for_mhslite
            discriminator:
              type: string
              enum:
                - for test
          required:
            - kako
      discriminator:
        propertyName: kako
    H:
      type: object
      properties:
        ludh:
          type: number
        kako:
          type: string
          enum:
            - for_H
      required:
        - kako
  x-types:
    Az:
      bukh: string
      vidh: number
      $discriminator:
        propertyName: bukh
        mapping:
          glagol: '#/components/schemas/Glagol'
          dobro: '#/components/schemas/Dobro'
    Glagol:
      $and:
        - $ref: '#/components/x-types/Az'
        - specificToGlagol: boolean
    Dobro:
      $and:
        - $ref: '#/components/x-types/Az'
        - specificToDobro: number::integer
          discriminator: for test
    Zelo:
      - $ref: '#/components/x-types/H'
      - mhslite:
          - boolean
          - undefined
        kako: for_mhslite
        discriminator:
          - for test
          - undefined
    H:
      ludh:
        - number
        - undefined
      kako: for_H
"
`;

exports[`bundle > openapi with writeOnly and readOnly fields 1`] = `
"openapi: 3.1.0
info:
  title: Test writeOnly/readOnly fields
  version: 1.0.0
paths:
  /test:
    get:
      requestBody:
        content:
          application/json:
            x-type:
              id:
                $readonly: string::uuid
                not-allowed: $readonly and $writeonly must not have neighbours
              name:
                $readonly: string
                $writeonly:
                  first: string
                  last: string
            examples:
              Correct:
                value:
                  name:
                    first: string
                    last: string
              Incorrect:
                value:
                  id: uuid-like-id
                  name: First Last
            schema:
              type: object
              properties:
                name:
                  type: object
                  properties:
                    first:
                      type: string
                    last:
                      type: string
                  required:
                    - first
                    - last
                  additionalProperties: false
              required:
                - name
              additionalProperties: false
      responses:
        '200':
          description: Test.
          content:
            application/json:
              x-type:
                id:
                  $readonly: string::uuid
                  not-allowed: $readonly and $writeonly must not have neighbours
                name:
                  $readonly: string
                  $writeonly:
                    first: string
                    last: string
              examples:
                Correct:
                  value:
                    id: uuid-like-id
                    name: First Last
                Incorrect:
                  value:
                    name:
                      first: Wrong
                      last: Wrong
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                required:
                  - id
                  - name
                additionalProperties: false
components:
  x-types:
    Id:
      $readonly: string::uuid
      not-allowed: $readonly and $writeonly must not have neighbours
    Name:
      $readonly: string
      $writeonly:
        first: string
        last: string
    Person:
      id:
        $readonly: string::uuid
        not-allowed: $readonly and $writeonly must not have neighbours
      name:
        $readonly: string
        $writeonly:
          first: string
          last: string
"
`;

exports[`bundle > replace existing schemas 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test
          content:
            application/json:
              x-type: string
              schema:
                type: string
components: {}
"
`;

exports[`bundle > resolve and translate $ands 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test
          content:
            application/json:
              x-type:
                $and:
                  - foo: boolean
                  - bar: number
              example:
                foo: wrong!
                wrong: not-expected!
              schema:
                type: object
                properties:
                  foo:
                    type: boolean
                  bar:
                    type: number
                required:
                  - foo
                  - bar
                additionalProperties: false
            application/problems+json:
              x-type:
                WrongAndFormat:
                  $and:
                    foo: boolean
                    bar: number
                Empty:
                  $and: []
                ImpossibleArraysCombination:
                  $and:
                    - array: string
                    - array: number
              examples:
                Correct:
                  value: {}
                Incorrect:
                  value:
                    unexpected: fails
              schema:
                type: object
                properties: {}
                required: []
                additionalProperties: false
            application/undefined+json:
              x-type:
                $and: []
components:
  x-types:
    CorrectAnd:
      $and:
        - foo: boolean
        - bar: number
"
`;

exports[`bundle > resolve different type of $refs on different levels and ignore wrong $refs (with --force) when bundling 1`] = `
"openapi: 3.1.0
info:
  title: Test internal $refs
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: An object with refs
          content:
            application/json:
              x-type:
                AFieldWithRegularRef:
                  - az
                  - bukh
                AFieldWithInlineRef:
                  - az
                  - bukh
              examples:
                Correct:
                  value:
                    AFieldWithInlineRef: az
                    AFieldWithRegularRef: bukh
                Incorrect:
                  value:
                    AFieldWithInlineRef: wrong
                    AFieldWithRegularRef: wrong
                    NonExistingField: wrong
              schema:
                type: object
                properties:
                  AFieldWithRegularRef:
                    type: string
                    enum:
                      - az
                      - bukh
                  AFieldWithInlineRef:
                    type: string
                    enum:
                      - az
                      - bukh
                required:
                  - AFieldWithRegularRef
                  - AFieldWithInlineRef
                additionalProperties: false
        '201':
          description: A bare ref
          content:
            application/json:
              x-type:
                - az
                - bukh
              examples:
                Correct:
                  value: az
              schema:
                type: string
                enum:
                  - az
                  - bukh
        '202':
          description: A file reference
          content:
            application/json:
              x-type: number
              examples:
                Correct:
                  value: 42
                Incorrect:
                  value: false
              schema:
                type: number
        '203':
          description: A transitive reference
          content:
            application/json:
              x-type:
                array:
                  - az
                  - bukh
              examples:
                Correct:
                  value:
                    - az
                Incorrect:
                  value: anything
              schema:
                type: array
                items:
                  type: string
                  enum:
                    - az
                    - bukh
        '404':
          description: A wrong ref
          content:
            application/json:
              x-type:
                AWrongRef:
                  $ref: wrong-file.yaml
              example:
                AWrongRef: Accepts anything
              schema:
                type: object
                properties:
                  AWrongRef: {}
                required:
                  - AWrongRef
                additionalProperties: false
components:
  x-types:
    Foo:
      - az
      - bukh
    Bar:
      array:
        - az
        - bukh
"
`;

exports[`bundle > translate string and number formats 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test
          content:
            application/json:
              x-type:
                Formats:
                  String: string
                  Date: string::date
                  DateTime: string::date-time
                  Email: string::email
                  UUID: string::uuid
                  Binary: string::binary
                  Number: number
                  Integer: number::integer
              schema:
                type: object
                properties:
                  Formats:
                    type: object
                    properties:
                      String:
                        type: string
                      Date:
                        type: string
                        format: date
                      DateTime:
                        type: string
                        format: date-time
                      Email:
                        type: string
                        format: email
                      UUID:
                        type: string
                        format: uuid
                      Binary:
                        type: string
                        format: binary
                      Number:
                        type: number
                      Integer:
                        type: integer
                    required:
                      - String
                      - Date
                      - DateTime
                      - Email
                      - UUID
                      - Binary
                      - Number
                      - Integer
                    additionalProperties: false
                required:
                  - Formats
                additionalProperties: false
components: {}
"
`;

exports[`bundle > translate x-type to schema inside parameters 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      parameters:
        - name: correct
          in: query
          x-type: string
          example: Test
          schema:
            type: string
        - name: wrong-example
          in: query
          x-type: string
          example: 42
          schema:
            type: string
        - name: lacks-x-type
          in: query
        - $ref: '#/components/parameters/Referenced'
components:
  parameters:
    Referenced:
      name: referenced-wrong-example
      in: query
      x-type: string
      example: true
      schema:
        type: string
"
`;

exports[`bundle > translate x-types inside ORs 1`] = `
"openapi: 3.1.0
info:
  title: Test
  version: 1.0.0
paths:
  /test:
    get:
      responses:
        '200':
          description: Test.
          content:
            application/json:
              x-type:
                Or:
                  - az
                  - bukh
                Conditional:
                  - vidh
                  - undefined
                NestedConditional:
                  - $ref: '#/components/x-types/Or'
                  - $ref: '#/components/x-types/Conditional'
                ComplexOr:
                  - az
                  - bukh: vidh
                  - - $literal:string
                    - $literal:number
              examples:
                Correct:
                  value:
                    Or: az
                    ComplexOr: string
                Incorrect:
                  value:
                    Or: wrong
                    Conditional: wrong
                    NestedConditional: wrong
                    ComplexOr: wrong
              schema:
                type: object
                properties:
                  Or:
                    type: string
                    enum:
                      - az
                      - bukh
                  Conditional:
                    type: string
                    enum:
                      - vidh
                  NestedConditional:
                    type: string
                    enum:
                      - az
                      - bukh
                      - vidh
                  ComplexOr:
                    anyOf:
                      - type: string
                        enum:
                          - az
                          - string
                          - number
                      - type: object
                        properties:
                          bukh:
                            type: string
                            enum:
                              - vidh
                        required:
                          - bukh
                        additionalProperties: false
                required:
                  - Or
                  - ComplexOr
                additionalProperties: false
components:
  x-types:
    Or:
      - az
      - bukh
    Conditional:
      - vidh
      - undefined
"
`;
